=begin
#Pulp 3 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'date'

module PulpDockerClient
  class DockerRemote
    attr_accessor :_href

    # Timestamp of creation.
    attr_accessor :_created

    attr_accessor :_type

    # A unique name for this remote.
    attr_accessor :name

    # The URL of an external content source.
    attr_accessor :url

    # If True, the plugin will validate imported artifacts.
    attr_accessor :validate

    # A PEM encoded CA certificate used to validate the server certificate presented by the remote server. Returns SHA256 sum on GET.
    attr_accessor :ssl_ca_certificate

    # A PEM encoded client certificate used for authentication. Returns SHA256 sum on GET.
    attr_accessor :ssl_client_certificate

    # A PEM encoded private key used for authentication. Returns SHA256 sum on GET.
    attr_accessor :ssl_client_key

    # If True, SSL peer validation must be performed.
    attr_accessor :ssl_validation

    # The proxy URL. Format: scheme://user:password@host:port
    attr_accessor :proxy_url

    # The username to be used for authentication when syncing.
    attr_accessor :username

    # The password to be used for authentication when syncing.
    attr_accessor :password

    # Timestamp of the most recent update of the remote.
    attr_accessor :_last_updated

    # Total number of simultaneous connections.
    attr_accessor :download_concurrency

    # The policy to use when downloading content. The possible values include: 'immediate', 'on_demand', and 'cache_only'. 'immediate' is the default.
    attr_accessor :policy

    # Name of the upstream repository
    attr_accessor :upstream_name

    # Whitelist tags to sync
    attr_accessor :whitelist_tags

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_href' => :'_href',
        :'_created' => :'_created',
        :'_type' => :'_type',
        :'name' => :'name',
        :'url' => :'url',
        :'validate' => :'validate',
        :'ssl_ca_certificate' => :'ssl_ca_certificate',
        :'ssl_client_certificate' => :'ssl_client_certificate',
        :'ssl_client_key' => :'ssl_client_key',
        :'ssl_validation' => :'ssl_validation',
        :'proxy_url' => :'proxy_url',
        :'username' => :'username',
        :'password' => :'password',
        :'_last_updated' => :'_last_updated',
        :'download_concurrency' => :'download_concurrency',
        :'policy' => :'policy',
        :'upstream_name' => :'upstream_name',
        :'whitelist_tags' => :'whitelist_tags'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_href' => :'String',
        :'_created' => :'DateTime',
        :'_type' => :'String',
        :'name' => :'String',
        :'url' => :'String',
        :'validate' => :'Boolean',
        :'ssl_ca_certificate' => :'String',
        :'ssl_client_certificate' => :'String',
        :'ssl_client_key' => :'String',
        :'ssl_validation' => :'Boolean',
        :'proxy_url' => :'String',
        :'username' => :'String',
        :'password' => :'String',
        :'_last_updated' => :'DateTime',
        :'download_concurrency' => :'Integer',
        :'policy' => :'String',
        :'upstream_name' => :'String',
        :'whitelist_tags' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PulpDockerClient::DockerRemote` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PulpDockerClient::DockerRemote`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_href')
        self._href = attributes[:'_href']
      end

      if attributes.key?(:'_created')
        self._created = attributes[:'_created']
      end

      if attributes.key?(:'_type')
        self._type = attributes[:'_type']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'validate')
        self.validate = attributes[:'validate']
      end

      if attributes.key?(:'ssl_ca_certificate')
        self.ssl_ca_certificate = attributes[:'ssl_ca_certificate']
      end

      if attributes.key?(:'ssl_client_certificate')
        self.ssl_client_certificate = attributes[:'ssl_client_certificate']
      end

      if attributes.key?(:'ssl_client_key')
        self.ssl_client_key = attributes[:'ssl_client_key']
      end

      if attributes.key?(:'ssl_validation')
        self.ssl_validation = attributes[:'ssl_validation']
      end

      if attributes.key?(:'proxy_url')
        self.proxy_url = attributes[:'proxy_url']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'_last_updated')
        self._last_updated = attributes[:'_last_updated']
      end

      if attributes.key?(:'download_concurrency')
        self.download_concurrency = attributes[:'download_concurrency']
      end

      if attributes.key?(:'policy')
        self.policy = attributes[:'policy']
      else
        self.policy = 'immediate'
      end

      if attributes.key?(:'upstream_name')
        self.upstream_name = attributes[:'upstream_name']
      end

      if attributes.key?(:'whitelist_tags')
        self.whitelist_tags = attributes[:'whitelist_tags']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@_type.nil? && @_type.to_s.length < 1
        invalid_properties.push('invalid value for "_type", the character length must be great than or equal to 1.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @url.to_s.length < 1
        invalid_properties.push('invalid value for "url", the character length must be great than or equal to 1.')
      end

      if !@ssl_ca_certificate.nil? && @ssl_ca_certificate.to_s.length < 1
        invalid_properties.push('invalid value for "ssl_ca_certificate", the character length must be great than or equal to 1.')
      end

      if !@ssl_client_certificate.nil? && @ssl_client_certificate.to_s.length < 1
        invalid_properties.push('invalid value for "ssl_client_certificate", the character length must be great than or equal to 1.')
      end

      if !@ssl_client_key.nil? && @ssl_client_key.to_s.length < 1
        invalid_properties.push('invalid value for "ssl_client_key", the character length must be great than or equal to 1.')
      end

      if !@proxy_url.nil? && @proxy_url.to_s.length < 1
        invalid_properties.push('invalid value for "proxy_url", the character length must be great than or equal to 1.')
      end

      if !@username.nil? && @username.to_s.length < 1
        invalid_properties.push('invalid value for "username", the character length must be great than or equal to 1.')
      end

      if !@password.nil? && @password.to_s.length < 1
        invalid_properties.push('invalid value for "password", the character length must be great than or equal to 1.')
      end

      if !@download_concurrency.nil? && @download_concurrency < 1
        invalid_properties.push('invalid value for "download_concurrency", must be greater than or equal to 1.')
      end

      if @upstream_name.nil?
        invalid_properties.push('invalid value for "upstream_name", upstream_name cannot be nil.')
      end

      if @upstream_name.to_s.length < 1
        invalid_properties.push('invalid value for "upstream_name", the character length must be great than or equal to 1.')
      end

      if !@whitelist_tags.nil? && @whitelist_tags.to_s.length < 1
        invalid_properties.push('invalid value for "whitelist_tags", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@_type.nil? && @_type.to_s.length < 1
      return false if @name.nil?
      return false if @name.to_s.length < 1
      return false if @url.nil?
      return false if @url.to_s.length < 1
      return false if !@ssl_ca_certificate.nil? && @ssl_ca_certificate.to_s.length < 1
      return false if !@ssl_client_certificate.nil? && @ssl_client_certificate.to_s.length < 1
      return false if !@ssl_client_key.nil? && @ssl_client_key.to_s.length < 1
      return false if !@proxy_url.nil? && @proxy_url.to_s.length < 1
      return false if !@username.nil? && @username.to_s.length < 1
      return false if !@password.nil? && @password.to_s.length < 1
      return false if !@download_concurrency.nil? && @download_concurrency < 1
      policy_validator = EnumAttributeValidator.new('String', ["immediate", "on_demand", "streamed"])
      return false unless policy_validator.valid?(@policy)
      return false if @upstream_name.nil?
      return false if @upstream_name.to_s.length < 1
      return false if !@whitelist_tags.nil? && @whitelist_tags.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] _type Value to be assigned
    def _type=(_type)
      if !_type.nil? && _type.to_s.length < 1
        fail ArgumentError, 'invalid value for "_type", the character length must be great than or equal to 1.'
      end

      @_type = _type
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if url.nil?
        fail ArgumentError, 'url cannot be nil'
      end

      if url.to_s.length < 1
        fail ArgumentError, 'invalid value for "url", the character length must be great than or equal to 1.'
      end

      @url = url
    end

    # Custom attribute writer method with validation
    # @param [Object] ssl_ca_certificate Value to be assigned
    def ssl_ca_certificate=(ssl_ca_certificate)
      if !ssl_ca_certificate.nil? && ssl_ca_certificate.to_s.length < 1
        fail ArgumentError, 'invalid value for "ssl_ca_certificate", the character length must be great than or equal to 1.'
      end

      @ssl_ca_certificate = ssl_ca_certificate
    end

    # Custom attribute writer method with validation
    # @param [Object] ssl_client_certificate Value to be assigned
    def ssl_client_certificate=(ssl_client_certificate)
      if !ssl_client_certificate.nil? && ssl_client_certificate.to_s.length < 1
        fail ArgumentError, 'invalid value for "ssl_client_certificate", the character length must be great than or equal to 1.'
      end

      @ssl_client_certificate = ssl_client_certificate
    end

    # Custom attribute writer method with validation
    # @param [Object] ssl_client_key Value to be assigned
    def ssl_client_key=(ssl_client_key)
      if !ssl_client_key.nil? && ssl_client_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "ssl_client_key", the character length must be great than or equal to 1.'
      end

      @ssl_client_key = ssl_client_key
    end

    # Custom attribute writer method with validation
    # @param [Object] proxy_url Value to be assigned
    def proxy_url=(proxy_url)
      if !proxy_url.nil? && proxy_url.to_s.length < 1
        fail ArgumentError, 'invalid value for "proxy_url", the character length must be great than or equal to 1.'
      end

      @proxy_url = proxy_url
    end

    # Custom attribute writer method with validation
    # @param [Object] username Value to be assigned
    def username=(username)
      if !username.nil? && username.to_s.length < 1
        fail ArgumentError, 'invalid value for "username", the character length must be great than or equal to 1.'
      end

      @username = username
    end

    # Custom attribute writer method with validation
    # @param [Object] password Value to be assigned
    def password=(password)
      if !password.nil? && password.to_s.length < 1
        fail ArgumentError, 'invalid value for "password", the character length must be great than or equal to 1.'
      end

      @password = password
    end

    # Custom attribute writer method with validation
    # @param [Object] download_concurrency Value to be assigned
    def download_concurrency=(download_concurrency)
      if !download_concurrency.nil? && download_concurrency < 1
        fail ArgumentError, 'invalid value for "download_concurrency", must be greater than or equal to 1.'
      end

      @download_concurrency = download_concurrency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] policy Object to be assigned
    def policy=(policy)
      validator = EnumAttributeValidator.new('String', ["immediate", "on_demand", "streamed"])
      unless validator.valid?(policy)
        fail ArgumentError, "invalid value for \"policy\", must be one of #{validator.allowable_values}."
      end
      @policy = policy
    end

    # Custom attribute writer method with validation
    # @param [Object] upstream_name Value to be assigned
    def upstream_name=(upstream_name)
      if upstream_name.nil?
        fail ArgumentError, 'upstream_name cannot be nil'
      end

      if upstream_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "upstream_name", the character length must be great than or equal to 1.'
      end

      @upstream_name = upstream_name
    end

    # Custom attribute writer method with validation
    # @param [Object] whitelist_tags Value to be assigned
    def whitelist_tags=(whitelist_tags)
      if !whitelist_tags.nil? && whitelist_tags.to_s.length < 1
        fail ArgumentError, 'invalid value for "whitelist_tags", the character length must be great than or equal to 1.'
      end

      @whitelist_tags = whitelist_tags
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _href == o._href &&
          _created == o._created &&
          _type == o._type &&
          name == o.name &&
          url == o.url &&
          validate == o.validate &&
          ssl_ca_certificate == o.ssl_ca_certificate &&
          ssl_client_certificate == o.ssl_client_certificate &&
          ssl_client_key == o.ssl_client_key &&
          ssl_validation == o.ssl_validation &&
          proxy_url == o.proxy_url &&
          username == o.username &&
          password == o.password &&
          _last_updated == o._last_updated &&
          download_concurrency == o.download_concurrency &&
          policy == o.policy &&
          upstream_name == o.upstream_name &&
          whitelist_tags == o.whitelist_tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_href, _created, _type, name, url, validate, ssl_ca_certificate, ssl_client_certificate, ssl_client_key, ssl_validation, proxy_url, username, password, _last_updated, download_concurrency, policy, upstream_name, whitelist_tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        PulpDockerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
