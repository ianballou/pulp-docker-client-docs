=begin
#Pulp 3 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'uri'

module PulpDockerClient
  class ContentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a manifest blob
    # Create a new ManifestBlob from a request.
    # @param data [Blob] 
    # @param [Hash] opts the optional parameters
    # @return [Blob]
    def content_docker_blobs_create(data, opts = {})
      data, _status_code, _headers = content_docker_blobs_create_with_http_info(data, opts)
      data
    end

    # Create a manifest blob
    # Create a new ManifestBlob from a request.
    # @param data [Blob] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Blob, Integer, Hash)>] Blob data, response status code and response headers
    def content_docker_blobs_create_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_blobs_create ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ContentApi.content_docker_blobs_create"
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/blobs/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'Blob' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_blobs_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List manifest blobs
    # ViewSet for ManifestBlobs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [InlineResponse200]
    def content_docker_blobs_list(opts = {})
      data, _status_code, _headers = content_docker_blobs_list_with_http_info(opts)
      data
    end

    # List manifest blobs
    # ViewSet for ManifestBlobs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def content_docker_blobs_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_blobs_list ...'
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/blobs/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'repository_version'] = opts[:'repository_version'] if !opts[:'repository_version'].nil?
      query_params[:'repository_version_added'] = opts[:'repository_version_added'] if !opts[:'repository_version_added'].nil?
      query_params[:'repository_version_removed'] = opts[:'repository_version_removed'] if !opts[:'repository_version_removed'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse200' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_blobs_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inspect a manifest blob
    # ViewSet for ManifestBlobs.
    # @param manifest_blob_href [String] URI of Manifest Blob. e.g.: /pulp/api/v3/content/docker/blobs/1/
    # @param [Hash] opts the optional parameters
    # @return [Blob]
    def content_docker_blobs_read(manifest_blob_href, opts = {})
      data, _status_code, _headers = content_docker_blobs_read_with_http_info(manifest_blob_href, opts)
      data
    end

    # Inspect a manifest blob
    # ViewSet for ManifestBlobs.
    # @param manifest_blob_href [String] URI of Manifest Blob. e.g.: /pulp/api/v3/content/docker/blobs/1/
    # @param [Hash] opts the optional parameters
    # @return [Array<(Blob, Integer, Hash)>] Blob data, response status code and response headers
    def content_docker_blobs_read_with_http_info(manifest_blob_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_blobs_read ...'
      end
      # verify the required parameter 'manifest_blob_href' is set
      if @api_client.config.client_side_validation && manifest_blob_href.nil?
        fail ArgumentError, "Missing the required parameter 'manifest_blob_href' when calling ContentApi.content_docker_blobs_read"
      end
      # resource path
      local_var_path = '{manifest_blob_href}'.sub('{' + 'manifest_blob_href' + '}', manifest_blob_href.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Blob' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_blobs_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a manifest list tag
    # Create a new ManifestListTag from a request.
    # @param data [ManifestListTag] 
    # @param [Hash] opts the optional parameters
    # @return [ManifestListTag]
    def content_docker_manifest_list_tags_create(data, opts = {})
      data, _status_code, _headers = content_docker_manifest_list_tags_create_with_http_info(data, opts)
      data
    end

    # Create a manifest list tag
    # Create a new ManifestListTag from a request.
    # @param data [ManifestListTag] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManifestListTag, Integer, Hash)>] ManifestListTag data, response status code and response headers
    def content_docker_manifest_list_tags_create_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifest_list_tags_create ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ContentApi.content_docker_manifest_list_tags_create"
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/manifest-list-tags/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'ManifestListTag' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifest_list_tags_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List manifest list tags
    # ViewSet for ManifestListTag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [InlineResponse2001]
    def content_docker_manifest_list_tags_list(opts = {})
      data, _status_code, _headers = content_docker_manifest_list_tags_list_with_http_info(opts)
      data
    end

    # List manifest list tags
    # ViewSet for ManifestListTag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def content_docker_manifest_list_tags_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifest_list_tags_list ...'
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/manifest-list-tags/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'repository_version'] = opts[:'repository_version'] if !opts[:'repository_version'].nil?
      query_params[:'repository_version_added'] = opts[:'repository_version_added'] if !opts[:'repository_version_added'].nil?
      query_params[:'repository_version_removed'] = opts[:'repository_version_removed'] if !opts[:'repository_version_removed'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2001' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifest_list_tags_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inspect a manifest list tag
    # ViewSet for ManifestListTag.
    # @param manifest_list_tag_href [String] URI of Manifest List Tag. e.g.: /pulp/api/v3/content/docker/manifest-list-tags/1/
    # @param [Hash] opts the optional parameters
    # @return [ManifestListTag]
    def content_docker_manifest_list_tags_read(manifest_list_tag_href, opts = {})
      data, _status_code, _headers = content_docker_manifest_list_tags_read_with_http_info(manifest_list_tag_href, opts)
      data
    end

    # Inspect a manifest list tag
    # ViewSet for ManifestListTag.
    # @param manifest_list_tag_href [String] URI of Manifest List Tag. e.g.: /pulp/api/v3/content/docker/manifest-list-tags/1/
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManifestListTag, Integer, Hash)>] ManifestListTag data, response status code and response headers
    def content_docker_manifest_list_tags_read_with_http_info(manifest_list_tag_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifest_list_tags_read ...'
      end
      # verify the required parameter 'manifest_list_tag_href' is set
      if @api_client.config.client_side_validation && manifest_list_tag_href.nil?
        fail ArgumentError, "Missing the required parameter 'manifest_list_tag_href' when calling ContentApi.content_docker_manifest_list_tags_read"
      end
      # resource path
      local_var_path = '{manifest_list_tag_href}'.sub('{' + 'manifest_list_tag_href' + '}', manifest_list_tag_href.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ManifestListTag' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifest_list_tags_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a manifest list
    # Create a new ManifestList from a request.
    # @param data [ManifestList] 
    # @param [Hash] opts the optional parameters
    # @return [ManifestList]
    def content_docker_manifest_lists_create(data, opts = {})
      data, _status_code, _headers = content_docker_manifest_lists_create_with_http_info(data, opts)
      data
    end

    # Create a manifest list
    # Create a new ManifestList from a request.
    # @param data [ManifestList] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManifestList, Integer, Hash)>] ManifestList data, response status code and response headers
    def content_docker_manifest_lists_create_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifest_lists_create ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ContentApi.content_docker_manifest_lists_create"
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/manifest-lists/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'ManifestList' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifest_lists_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List manifest lists
    # ViewSet for ManifestList.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [InlineResponse2002]
    def content_docker_manifest_lists_list(opts = {})
      data, _status_code, _headers = content_docker_manifest_lists_list_with_http_info(opts)
      data
    end

    # List manifest lists
    # ViewSet for ManifestList.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def content_docker_manifest_lists_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifest_lists_list ...'
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/manifest-lists/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'repository_version'] = opts[:'repository_version'] if !opts[:'repository_version'].nil?
      query_params[:'repository_version_added'] = opts[:'repository_version_added'] if !opts[:'repository_version_added'].nil?
      query_params[:'repository_version_removed'] = opts[:'repository_version_removed'] if !opts[:'repository_version_removed'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2002' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifest_lists_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inspect a manifest list
    # ViewSet for ManifestList.
    # @param manifest_list_href [String] URI of Manifest List. e.g.: /pulp/api/v3/content/docker/manifest-lists/1/
    # @param [Hash] opts the optional parameters
    # @return [ManifestList]
    def content_docker_manifest_lists_read(manifest_list_href, opts = {})
      data, _status_code, _headers = content_docker_manifest_lists_read_with_http_info(manifest_list_href, opts)
      data
    end

    # Inspect a manifest list
    # ViewSet for ManifestList.
    # @param manifest_list_href [String] URI of Manifest List. e.g.: /pulp/api/v3/content/docker/manifest-lists/1/
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManifestList, Integer, Hash)>] ManifestList data, response status code and response headers
    def content_docker_manifest_lists_read_with_http_info(manifest_list_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifest_lists_read ...'
      end
      # verify the required parameter 'manifest_list_href' is set
      if @api_client.config.client_side_validation && manifest_list_href.nil?
        fail ArgumentError, "Missing the required parameter 'manifest_list_href' when calling ContentApi.content_docker_manifest_lists_read"
      end
      # resource path
      local_var_path = '{manifest_list_href}'.sub('{' + 'manifest_list_href' + '}', manifest_list_href.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ManifestList' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifest_lists_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a manifest tag
    # Create a new ManifestTag from a request.
    # @param data [ManifestTag] 
    # @param [Hash] opts the optional parameters
    # @return [ManifestTag]
    def content_docker_manifest_tags_create(data, opts = {})
      data, _status_code, _headers = content_docker_manifest_tags_create_with_http_info(data, opts)
      data
    end

    # Create a manifest tag
    # Create a new ManifestTag from a request.
    # @param data [ManifestTag] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManifestTag, Integer, Hash)>] ManifestTag data, response status code and response headers
    def content_docker_manifest_tags_create_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifest_tags_create ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ContentApi.content_docker_manifest_tags_create"
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/manifest-tags/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'ManifestTag' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifest_tags_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List manifest tags
    # ViewSet for ManifestTag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [InlineResponse2003]
    def content_docker_manifest_tags_list(opts = {})
      data, _status_code, _headers = content_docker_manifest_tags_list_with_http_info(opts)
      data
    end

    # List manifest tags
    # ViewSet for ManifestTag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def content_docker_manifest_tags_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifest_tags_list ...'
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/manifest-tags/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'repository_version'] = opts[:'repository_version'] if !opts[:'repository_version'].nil?
      query_params[:'repository_version_added'] = opts[:'repository_version_added'] if !opts[:'repository_version_added'].nil?
      query_params[:'repository_version_removed'] = opts[:'repository_version_removed'] if !opts[:'repository_version_removed'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2003' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifest_tags_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inspect a manifest tag
    # ViewSet for ManifestTag.
    # @param manifest_tag_href [String] URI of Manifest Tag. e.g.: /pulp/api/v3/content/docker/manifest-tags/1/
    # @param [Hash] opts the optional parameters
    # @return [ManifestTag]
    def content_docker_manifest_tags_read(manifest_tag_href, opts = {})
      data, _status_code, _headers = content_docker_manifest_tags_read_with_http_info(manifest_tag_href, opts)
      data
    end

    # Inspect a manifest tag
    # ViewSet for ManifestTag.
    # @param manifest_tag_href [String] URI of Manifest Tag. e.g.: /pulp/api/v3/content/docker/manifest-tags/1/
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManifestTag, Integer, Hash)>] ManifestTag data, response status code and response headers
    def content_docker_manifest_tags_read_with_http_info(manifest_tag_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifest_tags_read ...'
      end
      # verify the required parameter 'manifest_tag_href' is set
      if @api_client.config.client_side_validation && manifest_tag_href.nil?
        fail ArgumentError, "Missing the required parameter 'manifest_tag_href' when calling ContentApi.content_docker_manifest_tags_read"
      end
      # resource path
      local_var_path = '{manifest_tag_href}'.sub('{' + 'manifest_tag_href' + '}', manifest_tag_href.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ManifestTag' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifest_tags_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an image manifest
    # Create a new Manifest from a request.
    # @param data [Manifest] 
    # @param [Hash] opts the optional parameters
    # @return [Manifest]
    def content_docker_manifests_create(data, opts = {})
      data, _status_code, _headers = content_docker_manifests_create_with_http_info(data, opts)
      data
    end

    # Create an image manifest
    # Create a new Manifest from a request.
    # @param data [Manifest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Manifest, Integer, Hash)>] Manifest data, response status code and response headers
    def content_docker_manifests_create_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifests_create ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ContentApi.content_docker_manifests_create"
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/manifests/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'Manifest' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifests_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List image manifests
    # ViewSet for Manifest.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [InlineResponse2004]
    def content_docker_manifests_list(opts = {})
      data, _status_code, _headers = content_docker_manifests_list_with_http_info(opts)
      data
    end

    # List image manifests
    # ViewSet for Manifest.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repository_version Repository Version referenced by HREF
    # @option opts [String] :repository_version_added Repository Version referenced by HREF
    # @option opts [String] :repository_version_removed Repository Version referenced by HREF
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<(InlineResponse2004, Integer, Hash)>] InlineResponse2004 data, response status code and response headers
    def content_docker_manifests_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifests_list ...'
      end
      # resource path
      local_var_path = '/pulp/api/v3/content/docker/manifests/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'repository_version'] = opts[:'repository_version'] if !opts[:'repository_version'].nil?
      query_params[:'repository_version_added'] = opts[:'repository_version_added'] if !opts[:'repository_version_added'].nil?
      query_params[:'repository_version_removed'] = opts[:'repository_version_removed'] if !opts[:'repository_version_removed'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2004' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifests_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inspect an image manifest
    # ViewSet for Manifest.
    # @param image_manifest_href [String] URI of Image Manifest. e.g.: /pulp/api/v3/content/docker/manifests/1/
    # @param [Hash] opts the optional parameters
    # @return [Manifest]
    def content_docker_manifests_read(image_manifest_href, opts = {})
      data, _status_code, _headers = content_docker_manifests_read_with_http_info(image_manifest_href, opts)
      data
    end

    # Inspect an image manifest
    # ViewSet for Manifest.
    # @param image_manifest_href [String] URI of Image Manifest. e.g.: /pulp/api/v3/content/docker/manifests/1/
    # @param [Hash] opts the optional parameters
    # @return [Array<(Manifest, Integer, Hash)>] Manifest data, response status code and response headers
    def content_docker_manifests_read_with_http_info(image_manifest_href, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_docker_manifests_read ...'
      end
      # verify the required parameter 'image_manifest_href' is set
      if @api_client.config.client_side_validation && image_manifest_href.nil?
        fail ArgumentError, "Missing the required parameter 'image_manifest_href' when calling ContentApi.content_docker_manifests_read"
      end
      # resource path
      local_var_path = '{image_manifest_href}'.sub('{' + 'image_manifest_href' + '}', image_manifest_href.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Manifest' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_docker_manifests_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
